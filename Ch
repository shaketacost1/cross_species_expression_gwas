
# Already saved JSON report
F=data/regulatory/human/ctcf_report.tsv  # despite .tsv extension, it's JSON

jq -r '
  .["@graph"][]
  | select(.assembly=="GRCh38")
  | select((.file_type=="bed narrowPeak") or (.file_type=="bigBed narrowPeak"))
  | "/files/\(.accession)/@@download/\(.filename)"
' "$F" | sed 's|^|https://www.encodeproject.org|g' \
> data/regulatory/human/ctcf_urls.txt

# Inspect result
head -5 data/regulatory/human/ctcf_urls.txt
wc -l data/regulatory/human/ctcf_urls.txt















# 1) Make sure folders exist
mkdir -p data/regulatory/human/ctcf_raw

# 2) Re-download the report explicitly as TSV
CTCF_TSV_URL="https://www.encodeproject.org/report/?type=File&assay_title=TF+ChIP-seq&target.label=CTCF&status=released&file_type=bed+narrowPeak&biosample_ontology.organ_slims=liver&assembly=GRCh38&limit=all&format=tsv"
curl -fsSL -H "Accept: text/tsv" "$CTCF_TSV_URL" -o data/regulatory/human/ctcf_report.tsv

# 3) Quick sanity check â€” first 2 lines should be a timestamp/URL line then a tabbed header row
sed -n '1,2p' data/regulatory/human/ctcf_report.tsv

# 4) Find the "Download URL" column index from the header (line 2)
COL=$(awk -F'\t' 'NR==2{for(i=1;i<=NF;i++) if($i=="Download URL"){print i; exit}}' data/regulatory/human/ctcf_report.tsv)
echo "Download URL col = $COL"

# 5) Extract the URLs (skip first 2 lines), prefix with domain when needed
tail -n +3 data/regulatory/human/ctcf_report.tsv \
| awk -F'\t' -v c="$COL" 'NF && $c!="" {u=$c; if(u ~ /^https?:\/\//) print u; else print "https://www.encodeproject.org" u}' \
> data/regulatory/human/ctcf_urls.txt

# 6) Inspect a few and count
head -5 data/regulatory/human/ctcf_urls.txt
wc -l data/regulatory/human/ctcf_urls.txt

# 7) Download the peaks
wget -c -i data/regulatory/human/ctcf_urls.txt -P data/regulatory/human/ctcf_raw

# 8) Verify content
ls -lh data/regulatory/human/ctcf_raw | wc -l
du -sh data/regulatory/human/ctcf_raw
gzip -cd data/regulatory/human/ctcf_raw/*.bed.gz | head














cd ~/my_project

# 1) Confirm the TSV exists and there are no weird chars in the path
ls -lb data/regulatory/human/ctcf_report.tsv
sed -n '1,3p' data/regulatory/human/ctcf_report.tsv | cat -A



# 2) Get the column index for "Download URL" (header is on line 2)
COL=$(awk -F'\t' 'NR==2{for(i=1;i<=NF;i++) if($i=="Download URL"){print i; exit}}' data/regulatory/human/ctcf_report.tsv)
echo "Download URL col = $COL"



tail -n +3 data/regulatory/human/ctcf_report.tsv \
| awk -F'\t' -v c="$COL" '{u=$c; if(u!=""){ if(u ~ /^https?:\/\//) print u; else print "https://www.encodeproject.org" u }}' \
> data/regulatory/human/ctcf_urls.txt

wc -l data/regulatory/human/ctcf_urls.txt
head -5 data/regulatory/human/ctcf_urls.txt

wget -c -i data/regulatory/human/ctcf_urls.txt -P data/regulatory/human/ctcf_raw

ls -lh data/regulatory/human/ctcf_raw | wc -l
gzip -cd data/regulatory/human/ctcf_raw/*.bed.gz | head




mkdir -p data/regulatory/human/{ctcf_raw,h3k27ac_raw}

CTCF_TSV_URL="https://www.encodeproject.org/report/?type=File&assay_title=TF+ChIP-seq&target.label=CTCF&status=released&file_type=bed+narrowPeak&biosample_ontology.organ_slims=liver&assembly=GRCh38&limit=all&format=tsv"
curl -fsSL -H "Accept: text/tsv" "$CTCF_TSV_URL" > data/regulatory/human/ctcf_report.tsv












cut -f20 file_report_2025_9_4_3h_31m.tsv | grep -v "Download URL" > ctcf_urls.txt


mkdir -p ctcf_raw
wget -c -i ctcf_urls.txt -P ctcf_raw

ls -lh ctcf_raw



COL=$(awk -F'\t' 'NR==1{for(i=1;i<=NF;i++) if($i=="Download URL"){print i; exit}}' ctcf_report.tsv)
echo "Download URL column index: $COL"


# extract URLs (skip header), drop blanks, make absolute URLs
awk -F'\t' -v c="$COL" 'NR>1 && $c!="" {print $c}' ctcf_report.tsv \
| awk '{u=$0; if(u ~ /^https?:\/\//) print u; else print "https://www.encodeproject.org" u}' \
> ctcf_urls.txt


# copy the report you downloaded into this folder first, or point to the full path
F=~/Downloads/file_report_2025_9_4_3h_31m.tsv

# find column indices
ACC=$(awk -F'\t' 'NR==2{for(i=1;i<=NF;i++) if($i=="Accession") print i}' "$F")
BIO=$(awk -F'\t' 'NR==2{for(i=1;i<=NF;i++) if($i=="Biosample name") print i}' "$F")
ORG=$(awk -F'\t' 'NR==2{for(i=1;i<=NF;i++) if($i=="Organ") print i}' "$F")
ASM=$(awk -F'\t' 'NR==2{for(i=1;i<=NF;i++) if($i=="Genome assembly") print i}' "$F")
OTY=$(awk -F'\t' 'NR==2{for(i=1;i<=NF;i++) if($i=="Output type") print i}' "$F")

# write metadata CSV (skip the first two header lines)
awk -F'\t' -v a="$ACC" -v b="$BIO" -v o="$ORG" -v g="$ASM" -v t="$OTY" 'NR>2{
  OFS=","; print $a,$b,$o,$g,$t
}' "$F" | (echo "accession,biosample,organ,assembly,output_type"; cat) > ctcf_metadata.csv


wc -l ctcf_urls.txt
head -5 ctcf_urls.txt


mkdir -p ctcf_raw
wget -c -i ctcf_urls.txt -P ctcf_raw


# how many files and total size?
ls -lh ctcf_raw | wc -l
du -sh ctcf_raw
# peek a file
gzip -cd ctcf_raw/*.bed.gz | head


# create a merged narrowPeak and tag each line with its source accession
echo -e "chrom\tstart\tend\tname\tscore\tstrand\tsignalValue\tpValue\tqValue\tsummit\tsource" > ctcf_merged.narrowPeak

for f in ctcf_raw/*.bed.gz; do
  acc=$(basename "$f" | sed -E 's/^([A-Z0-9]+).*/\1/')
  gzip -cd "$f" \
  | awk -v src="$acc" 'BEGIN{OFS="\t"} {print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,src}' \
  >> ctcf_merged.narrowPeak
done

# from the human/ directory where ctcf_raw/ lives
echo -e "chrom\tstart\tend\tname\tscore\tstrand\tsignalValue\tpValue\tqValue\tsummit\tsource" > ctcf_merged.narrowPeak

for f in ctcf_raw/*.bed.gz; do
  acc=$(basename "$f" | sed -E 's/^([A-Z0-9]+).*/\1/')
  gzip -cd "$f" \
  | awk -v src="$acc" 'BEGIN{OFS="\t"}{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,src}' \
  >> ctcf_merged.narrowPeak
done

# sort for downstream compatibility (lexicographic chrom, numeric start)
LC_ALL=C sort -k1,1 -k2,2n ctcf_merged.narrowPeak -o ctcf_merged.narrowPeak

awk 'BEGIN{OFS="\t"} NR>1{print $1,$2,$3,$11}' ctcf_merged.narrowPeak > ctcf_merged.bed


# spot-check
head ctcf_merged.narrowPeak


mkdir -p ~/my_project/data/regulatory/human/ctcf
mv ctcf_raw ctcf_merged.narrowPeak ctcf_merged.bed ctcf_metadata.csv ~/my_project/data/regulatory/human/ctcf/


cd ~/my_project
git lfs track "*.bed.gz" "*.narrowPeak" "*.bed"
git add .gitattributes data/regulatory/human/ctcf
git commit -m "Add human CTCF narrowPeak peaks (GRCh38) + merged set and metadata"
git push origin main
